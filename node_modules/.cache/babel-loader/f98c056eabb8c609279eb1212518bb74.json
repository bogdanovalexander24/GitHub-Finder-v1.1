{"ast":null,"code":"import _slicedToArray from \"/Users/alexb/gihub-finder/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/alexb/gihub-finder/src/components/users/Search.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Search = ({\n  clearUsers,\n  showClear\n}) => {\n  const _userState = userState(''),\n        _userState2 = _slicedToArray(_userState, 2),\n        text = _userState2[0],\n        setText = _userState2[1];\n\n  const onSubmit = e => {\n    e.preventDefault(); // prevent update of the page\n\n    if (this.state.text === '') {\n      this.props.setAlert('Please enter something', 'light');\n    } else {\n      this.props.searchUsers(this.state.text);\n      this.setState({\n        text: ''\n      });\n    }\n  };\n\n  const onChange = e => setText(e.target.value);\n\n  retern(React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: this.onSubmit,\n    action: \"\",\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    name: \"text\",\n    placeholder: \"Search...\",\n    value: this.state.text,\n    onChange: this.onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Search\",\n    className: \"btn btn-dark btn-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  })), showClear && React.createElement(\"button\", {\n    className: \"btn btn-light btn-block\",\n    onClick: clearUsers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Clear\")));\n};\n\nSearch.propTypes = {\n  searchUsers: PropTypes.func.isRequired,\n  clearUsers: PropTypes.func.isRequired,\n  showClear: PropTypes.bool.isRequired,\n  setAlert: PropTypes.func.isRequired\n};\nexport default Search;","map":{"version":3,"sources":["/Users/alexb/gihub-finder/src/components/users/Search.js"],"names":["React","useState","PropTypes","Search","clearUsers","showClear","userState","text","setText","onSubmit","e","preventDefault","state","props","setAlert","searchUsers","setState","onChange","target","value","retern","propTypes","func","isRequired","bool"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAA+B;AAAA,qBACpBC,SAAS,CAAC,EAAD,CADW;AAAA;AAAA,QACrCC,IADqC;AAAA,QAC/BC,OAD+B;;AAG5C,QAAMC,QAAQ,GAAGC,CAAC,IAAI;AACpBA,IAAAA,CAAC,CAACC,cAAF,GADoB,CACA;;AACpB,QAAI,KAAKC,KAAL,CAAWL,IAAX,KAAoB,EAAxB,EAA4B;AAC1B,WAAKM,KAAL,CAAWC,QAAX,CAAoB,wBAApB,EAA8C,OAA9C;AACD,KAFD,MAEO;AACL,WAAKD,KAAL,CAAWE,WAAX,CAAuB,KAAKH,KAAL,CAAWL,IAAlC;AACA,WAAKS,QAAL,CAAc;AAAET,QAAAA,IAAI,EAAE;AAAR,OAAd;AACD;AACF,GARD;;AASA,QAAMU,QAAQ,GAAGP,CAAC,IAAIF,OAAO,CAACE,CAAC,CAACQ,MAAF,CAASC,KAAV,CAA7B;;AAEAC,EAAAA,MAAM,CACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,QAAQ,EAAE,KAAKX,QAArB;AAA+B,IAAA,MAAM,EAAC,EAAtC;AAAyC,IAAA,SAAS,EAAC,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,WAAW,EAAC,WAHd;AAIE,IAAA,KAAK,EAAE,KAAKG,KAAL,CAAWL,IAJpB;AAKE,IAAA,QAAQ,EAAE,KAAKU,QALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,KAAK,EAAC,QAFR;AAGE,IAAA,SAAS,EAAC,wBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF,EAeGZ,SAAS,IACR;AAAQ,IAAA,SAAS,EAAC,yBAAlB;AAA4C,IAAA,OAAO,EAAED,UAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAhBJ,CADI,CAAN;AAuBD,CArCD;;AAuCAD,MAAM,CAACkB,SAAP,GAAmB;AACjBN,EAAAA,WAAW,EAAEb,SAAS,CAACoB,IAAV,CAAeC,UADX;AAEjBnB,EAAAA,UAAU,EAAEF,SAAS,CAACoB,IAAV,CAAeC,UAFV;AAGjBlB,EAAAA,SAAS,EAAEH,SAAS,CAACsB,IAAV,CAAeD,UAHT;AAIjBT,EAAAA,QAAQ,EAAEZ,SAAS,CAACoB,IAAV,CAAeC;AAJR,CAAnB;AAOA,eAAepB,MAAf","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Search = ({ clearUsers, showClear }) => {\n  const [text, setText] = userState('');\n\n  const onSubmit = e => {\n    e.preventDefault(); // prevent update of the page\n    if (this.state.text === '') {\n      this.props.setAlert('Please enter something', 'light');\n    } else {\n      this.props.searchUsers(this.state.text);\n      this.setState({ text: '' });\n    }\n  };\n  const onChange = e => setText(e.target.value);\n\n  retern(\n    <div>\n      <form onSubmit={this.onSubmit} action='' className='form'>\n        <input\n          type='text'\n          name='text'\n          placeholder='Search...'\n          value={this.state.text}\n          onChange={this.onChange}\n        />\n        <input\n          type='submit'\n          value='Search'\n          className='btn btn-dark btn-block'\n        />\n      </form>\n      {showClear && (\n        <button className='btn btn-light btn-block' onClick={clearUsers}>\n          Clear\n        </button>\n      )}\n    </div>\n  );\n};\n\nSearch.propTypes = {\n  searchUsers: PropTypes.func.isRequired,\n  clearUsers: PropTypes.func.isRequired,\n  showClear: PropTypes.bool.isRequired,\n  setAlert: PropTypes.func.isRequired\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}