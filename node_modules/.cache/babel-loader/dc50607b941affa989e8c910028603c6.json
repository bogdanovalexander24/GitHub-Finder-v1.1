{"ast":null,"code":"import _slicedToArray from \"/Users/alexb/gihub-finder/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/alexb/gihub-finder/src/context/github/GithubState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport GitHubContext from './githubContext';\nimport GitHubReducer from './githubReducer';\nimport { SEARCH_USERS, GET_USER, CLEAR_USERS, GET_REPOS, SET_LOADING } from '../types';\nlet gitHubClientId;\nlet gitHubClientSecret;\n\nif (process.env.NODE_ENV !== 'production') {\n  gitHubClientId = process.env.REACT_APP_GITHUB_CLIENT_ID;\n  gitHubSecret = process.env.REACT_APP_GITHUB_CLIENT_SECRET;\n} else {\n  gitHubClientId = GITHUB_CLIENT_ID;\n  gitHubClientSecret = GITHUB_CLIENT_SECRET;\n}\n\nconst GithubState = props => {\n  const initialState = {\n    users: [],\n    user: {},\n    repos: [],\n    loading: false\n  };\n\n  const _useReducer = useReducer(GitHubReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; // async componentDidMount() {\n  //   this.setState({ loading: true });\n  //   const res = await axios.get(\n  //     `https://api.github.com/users?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n  //   );\n  //   this.setState({ users: res.data, loading: false });\n  // }\n  //Search Users\n\n\n  const searchUsers = async text => {\n    setLoading();\n    const res = await axios.get(\"https://api.github.com/search/users?q=\".concat(text, \"&client_id=\").concat(gitHubClientId, \"&client_secret=\").concat(gitHubClientSecret));\n    dispatch({\n      type: SEARCH_USERS,\n      payload: res.data.items\n    });\n  }; //Get User\n\n\n  const getUser = async userName => {\n    setLoading();\n    const res = await axios.get(\"https://api.github.com/users/\".concat(userName, \"?client_id=\").concat(gitHubClientId, \"&client_secret=\").concat(gitHubClientSecret));\n    dispatch({\n      type: GET_USER,\n      payload: res.data\n    });\n  }; //Get Repos\n\n\n  const getUserRepos = async userName => {\n    setLoading();\n    const res = await axios.get(\"https://api.github.com/users/\".concat(userName, \"/repos?per_page=5&sort=created:asc&client_id=\").concat(gitHubClientId, \"&client_secret=\").concat(gitHubClientSecret));\n    dispatch({\n      type: GET_REPOS,\n      payload: res.data\n    });\n  }; // Clear Users\n\n\n  const clearUsers = () => {\n    dispatch({\n      type: CLEAR_USERS\n    });\n  }; //Set Loading\n\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  });\n\n  return React.createElement(GitHubContext.Provider, {\n    value: {\n      users: state.users,\n      user: state.user,\n      repos: state.repos,\n      loading: state.loading,\n      searchUsers,\n      clearUsers,\n      getUser,\n      getUserRepos\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default GithubState;","map":{"version":3,"sources":["/Users/alexb/gihub-finder/src/context/github/GithubState.js"],"names":["React","useReducer","axios","GitHubContext","GitHubReducer","SEARCH_USERS","GET_USER","CLEAR_USERS","GET_REPOS","SET_LOADING","gitHubClientId","gitHubClientSecret","process","env","NODE_ENV","REACT_APP_GITHUB_CLIENT_ID","gitHubSecret","REACT_APP_GITHUB_CLIENT_SECRET","GITHUB_CLIENT_ID","GITHUB_CLIENT_SECRET","GithubState","props","initialState","users","user","repos","loading","state","dispatch","searchUsers","text","setLoading","res","get","type","payload","data","items","getUser","userName","getUserRepos","clearUsers","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\nimport GitHubContext from './githubContext';\nimport GitHubReducer from './githubReducer';\nimport {\n  SEARCH_USERS,\n  GET_USER,\n  CLEAR_USERS,\n  GET_REPOS,\n  SET_LOADING\n} from '../types';\n\nlet gitHubClientId;\nlet gitHubClientSecret;\n\nif (process.env.NODE_ENV !== 'production') {\n  gitHubClientId = process.env.REACT_APP_GITHUB_CLIENT_ID;\n  gitHubSecret = process.env.REACT_APP_GITHUB_CLIENT_SECRET;\n} else {\n  gitHubClientId = GITHUB_CLIENT_ID;\n  gitHubClientSecret = GITHUB_CLIENT_SECRET;\n}\n\nconst GithubState = props => {\n  const initialState = {\n    users: [],\n    user: {},\n    repos: [],\n    loading: false\n  };\n\n  const [state, dispatch] = useReducer(GitHubReducer, initialState);\n\n  // async componentDidMount() {\n  //   this.setState({ loading: true });\n\n  //   const res = await axios.get(\n  //     `https://api.github.com/users?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n  //   );\n\n  //   this.setState({ users: res.data, loading: false });\n  // }\n\n  //Search Users\n  const searchUsers = async text => {\n    setLoading();\n    const res = await axios.get(\n      `https://api.github.com/search/users?q=${text}&client_id=${gitHubClientId}&client_secret=${gitHubClientSecret}`\n    );\n\n    dispatch({\n      type: SEARCH_USERS,\n      payload: res.data.items\n    });\n  };\n\n  //Get User\n  const getUser = async userName => {\n    setLoading();\n    const res = await axios.get(\n      `https://api.github.com/users/${userName}?client_id=${gitHubClientId}&client_secret=${gitHubClientSecret}`\n    );\n\n    dispatch({\n      type: GET_USER,\n      payload: res.data\n    });\n  };\n\n  //Get Repos\n  const getUserRepos = async userName => {\n    setLoading();\n\n    const res = await axios.get(\n      `https://api.github.com/users/${userName}/repos?per_page=5&sort=created:asc&client_id=${gitHubClientId}&client_secret=${gitHubClientSecret}`\n    );\n\n    dispatch({\n      type: GET_REPOS,\n      payload: res.data\n    });\n  };\n\n  // Clear Users\n  const clearUsers = () => {\n    dispatch({\n      type: CLEAR_USERS\n    });\n  };\n\n  //Set Loading\n  const setLoading = () => dispatch({ type: SET_LOADING });\n\n  return (\n    <GitHubContext.Provider\n      value={{\n        users: state.users,\n        user: state.user,\n        repos: state.repos,\n        loading: state.loading,\n        searchUsers,\n        clearUsers,\n        getUser,\n        getUserRepos\n      }}\n    >\n      {props.children}\n    </GitHubContext.Provider>\n  );\n};\n\nexport default GithubState;\n"]},"metadata":{},"sourceType":"module"}